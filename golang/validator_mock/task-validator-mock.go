// Code generated by MockGen. DO NOT EDIT.
// Source: task_validator.go

// Package mock_validator is a generated GoMock package.
package validator_mock

import (
	model "go-rest-api/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITaskValidator is a mock of ITaskValidator interface.
type MockITaskValidator struct {
	ctrl     *gomock.Controller
	recorder *MockITaskValidatorMockRecorder
}

// MockITaskValidatorMockRecorder is the mock recorder for MockITaskValidator.
type MockITaskValidatorMockRecorder struct {
	mock *MockITaskValidator
}

// NewMockITaskValidator creates a new mock instance.
func NewMockITaskValidator(ctrl *gomock.Controller) *MockITaskValidator {
	mock := &MockITaskValidator{ctrl: ctrl}
	mock.recorder = &MockITaskValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITaskValidator) EXPECT() *MockITaskValidatorMockRecorder {
	return m.recorder
}

// TaskValidate mocks base method.
func (m *MockITaskValidator) TaskValidate(task model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskValidate", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// TaskValidate indicates an expected call of TaskValidate.
func (mr *MockITaskValidatorMockRecorder) TaskValidate(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskValidate", reflect.TypeOf((*MockITaskValidator)(nil).TaskValidate), task)
}
