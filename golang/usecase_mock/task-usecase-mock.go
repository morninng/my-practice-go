// Code generated by MockGen. DO NOT EDIT.
// Source: task-usecase.go

// Package mock_usecase is a generated GoMock package.
package usecase_mock

import (
	model "go-rest-api/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITaskUsecase is a mock of ITaskUsecase interface.
type MockITaskUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockITaskUsecaseMockRecorder
}

// MockITaskUsecaseMockRecorder is the mock recorder for MockITaskUsecase.
type MockITaskUsecaseMockRecorder struct {
	mock *MockITaskUsecase
}

// NewMockITaskUsecase creates a new mock instance.
func NewMockITaskUsecase(ctrl *gomock.Controller) *MockITaskUsecase {
	mock := &MockITaskUsecase{ctrl: ctrl}
	mock.recorder = &MockITaskUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITaskUsecase) EXPECT() *MockITaskUsecaseMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockITaskUsecase) CreateTask(task model.Task) (model.TaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", task)
	ret0, _ := ret[0].(model.TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockITaskUsecaseMockRecorder) CreateTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockITaskUsecase)(nil).CreateTask), task)
}

// DeleteTask mocks base method.
func (m *MockITaskUsecase) DeleteTask(taskId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", taskId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockITaskUsecaseMockRecorder) DeleteTask(taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockITaskUsecase)(nil).DeleteTask), taskId)
}

// GetAllTasks mocks base method.
func (m *MockITaskUsecase) GetAllTasks() ([]model.TaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTasks")
	ret0, _ := ret[0].([]model.TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTasks indicates an expected call of GetAllTasks.
func (mr *MockITaskUsecaseMockRecorder) GetAllTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTasks", reflect.TypeOf((*MockITaskUsecase)(nil).GetAllTasks))
}

// GetTaskById mocks base method.
func (m *MockITaskUsecase) GetTaskById(taskId uint) (model.TaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskById", taskId)
	ret0, _ := ret[0].(model.TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskById indicates an expected call of GetTaskById.
func (mr *MockITaskUsecaseMockRecorder) GetTaskById(taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskById", reflect.TypeOf((*MockITaskUsecase)(nil).GetTaskById), taskId)
}

// UpdateTask mocks base method.
func (m *MockITaskUsecase) UpdateTask(task model.Task, taskId uint) (model.TaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", task, taskId)
	ret0, _ := ret[0].(model.TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockITaskUsecaseMockRecorder) UpdateTask(task, taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockITaskUsecase)(nil).UpdateTask), task, taskId)
}
