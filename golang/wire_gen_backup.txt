元の mainにあったコード

	db := db.NewDB()
	taskValidator := validator.NewTaskValidator()
	userValidator := validator.NewUserValidator()
	userRepository := repository.NewUserRepository(db)
	taskRepository := repository.NewTaskRepository(db)
	userUsecase := usecase.NewUserUsecase(userRepository, userValidator)
	taskUsecase := usecase.NewTaskUsecase(taskRepository, taskValidator)
	userController := controller.NewUserController(userUsecase)
	taskController := controller.NewTaskController(taskUsecase)

	taskController := InitializeTaskController()
	userController := InitializeUserController()

	e := router.NewRouter(userController, taskController)

生成前のコード: user だけのとき


// + wireinject
package main

import (
	"go-rest-api/controller"
	"go-rest-api/db"
	"go-rest-api/repository"
	"go-rest-api/usecase"
	"go-rest-api/validator"

	"github.com/google/wire"
)

func NewUserController(uuc controller.IUserController) *controller.UserController {
	return uuc.(*controller.UserController)
}

func InitializeUserController() *controller.UserController {
	wire.Build(
		db.NewDB,
		validator.NewUserValidator,
		repository.NewUserRepository,
		controller.NewUserController,
		usecase.NewUserUsecase, NewUserController)
	return nil
}
↑に元のproviderが全て設定することを確認する。


userとtaskのとき



func NewTaskController(utc controller.ITaskController) *controller.TaskController {
	return utc.(*controller.TaskController)
}

func InitializeTaskController() *controller.TaskController {
	wire.Build(
		db.NewDB,
		validator.NewTaskValidator,
		repository.NewTaskRepository,
		controller.NewTaskController,
		usecase.NewTaskUsecase, 
		NewTaskController)
	return nil
}



編集したあとに、次の２点を戻すのを忘れずに

変換後
// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

変換前
// + wireinject



"github.com/google/wire"